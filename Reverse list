//Function to reverse a linked list

void reverse(){
    struct Node *current, *prev, *next;
    prev = NULL;
    current = head;
    while(current != NULL){
        next = current -> next;
        current -> next = prev;
        prev = current ;
        current = next;
    }
    head = prev;
}
//-------------------------------------------------------------------------------

//Using Recursion
void reverse(struct Node* p){ // p receives the head of list as argument
    if(p->next == NULL){
        head = p;
        return;
        }
     reverse(p->next);
     struct Node* q = p->next;
     q->next = p;
     p -> next = NULL;
 }
 
 //-------------------------------------------------------------------------------
 
 // using a explicit stack
void reverse(struct Node* head){
    if(head == NULL)return;
    struct Node* temp = head;
    stack<struct Node*> S;
    while(temp != NULL){
        S.push(temp);
        temp = temp -> next;
    }
    head = S.top();
    temp = head;
    S.pop();
    while(!S.empty()){
        temp -> next = S.top();
        S.pop();
        temp = temp -> next;
    }
    temp -> next = NULL;
}



